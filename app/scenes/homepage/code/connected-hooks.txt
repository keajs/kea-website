// features-logic.js
import { kea } from 'kea'
import PropTypes from 'prop-types'

export default kea({
  actions: () => ({
    toggleFeature: (feature) => ({ feature })
  }),
  reducers: ({ actions }) => ({
    features: [{}, PropTypes.object, {
      [actions.toggleFeature]: (state, payload) => {
        const { feature } = payload
        return {
          ...state,
          [feature]: !state[feature]
        }
      }
    }]
  })
})

// index.js
import React, { Component } from 'react'
import { useActions, useValues } from 'kea'

import featuresLogic from '../features-logic'

const connectedLogic = connect({
  actions: [
    featuresLogic, [
      'toggleFeature'
    ]
  ],
  values: [
    featuresLogic, [
      'features'
    ]
  ]
})

function ConnectedToggle () {
  // This example doesn't really apply to hooks...
  // ... as we could have used useValues(featuresLogic) directly
  const { features } = useValues(connectedLogic)
  const { toggleFeature } = useActions(connectedLogic)

  return (
    <div>
      <p>{features.something ? 'Something enabled' : 'Something disabled'}</p>
      <button onClick={() => toggleFeature('something')}>Toggle something</button>
    </div>
  )
}

export default ConnectedToggle
